package main

import (
	"go/importer"
	"go/types"
	"io/ioutil"
	"os"
	"path/filepath"

	"github.com/spf13/cobra"

	"github.com/chtison/fmt"
)

const Version = "1.0.0"

var rootCmd = &cobra.Command{
	Version: Version,
	Use:     fmt.Sprintf("%s PACKAGE", filepath.Base(os.Args[0])),
	Long:   `go-extend is a command for extending golang packages`,
	DisableFlagsInUseLine: true,
	RunE:    runE,
}

var (
	flagFile string
	flagPackage string
)

func init() {
	f := rootCmd.Flags()
	f.StringVarP(&flagFile, "file", "f", "generated.go", "Set outputed file name")
	f.StringVarP(&flagPackage, "package", "p", "", "Set outputed package name")
}

func runE(cmd *cobra.Command, args []string) error {
	if len(args) != 1 {
		cmd.Help()
		return nil
	}
	if err := generate(args[0]); err != nil {
		return err
	}
	return nil
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		os.Exit(1)
	}
}

func generate(importPath string) error {
	pkg, err := importer.Default().Import(importPath)
	if err != nil {
		return err
	}
	b := fmt.NewBuilder()
	if flagPackage == "" {
		flagPackage = pkg.Name()
	}
	b.Printfln("package %s", flagPackage)
	b.Printfln("// generated by github.com/chtison/go-extend v%s ; DO NOT EDIT", Version)
	b.Println("")
	b.Printfln(`import "%s"`, importPath)
	consts := make([]types.Object, 0)
	vars := make([]types.Object, 0)
	funcs := make([]types.Object, 0)
	typeNames := make([]types.Object, 0)
	scope := pkg.Scope()
	for _, name := range scope.Names() {
		object := scope.Lookup(name)
		if object.Exported() {
			switch object.(type) {
			case *types.Func:
				funcs = append(funcs, object)
			case *types.Const:
				consts = append(consts, object)
			case *types.Var:
				vars = append(vars, object)
			case *types.TypeName:
				typeNames = append(typeNames, object)
			}
		}
	}
	generateObjects(b, pkg.Name(), "const", consts)
	generateObjects(b, pkg.Name(), "var", vars)
	generateObjects(b, pkg.Name(), "var", funcs)
	generateObjects(b, pkg.Name(), "type", typeNames)
	path := flagFile
	if err := ioutil.WriteFile(path, []byte(b.String()), 0644); err != nil {
		return err
	}
	fmt.Printfln("+ %s successfully generated", path)
	return nil
}

func generateObjects(b *fmt.Builder, pkgName, category string, objects []types.Object) {
	if len(objects) > 0 {
		b.Printfln("%s (", category)
		for _, object := range objects {
			b.Printfln("\t%s = %s.%[1]s", object.Name(), pkgName)
		}
		b.Printfln(")")
	}
}
